@inject HttpClient Http

<div class="row mt-5">
    <div class="col">
        <h3>Categories</h3>
    </div>
    <div class="col">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        <input @bind="inputSearch" type="text" class="form-control" placeholder="Search...">
                        <button @onclick="StartSearch" class="btn btn-secondary" type="button">
                            Search
                        </button>
                        <button @onclick="Reset" class="btn btn-dark" type="button">
                            Reset
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table mb-4">
        <thead>
            <tr>
                <th></th>
                <th>Title</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var category in categories)
        {
            <tr>
                <td></td>
                @if (renameCategory != category.Id)
                {
                    <td @onclick="@(async () => await CategoryClicked(category.Id))">
                        @category.Title
                    </td>
                }
                else
                {
                    <td>
                        <input class="form-control w-50 d-inline" @bind="categoryTitle" placeholder="New Category name" 
                               @onclick:preventDefault="true"
                               @onclick:stopPropagation="true"/>
                        <button @onclick="@(() => RenameCategory())" class="btn btn-secondary me-2"
                                @onclick:preventDefault="true"
                                @onclick:stopPropagation="true">
                            Confirm
                        </button>
                    </td>
                }
                <td class="text-center">
                    @if (renameCategory != category.Id)
                    {
                        <button @onclick="@(() => StartRenameCategory(category.Id))" class="btn btn-secondary me-2"
                                @onclick:preventDefault="true"
                                @onclick:stopPropagation="true">
                            Rename
                        </button>
                    }
                    else
                    {
                        <button @onclick="@(() => StartRenameCategory(0))" class="btn btn-danger me-2"
                                @onclick:preventDefault="true"
                                @onclick:stopPropagation="true">
                            Cancel
                        </button>
                    }
                    <button class="btn btn-dark"
                            @onclick="@(async () => await DeleteCategory(category.Id))"
                            @onclick:preventDefault="true"
                            @onclick:stopPropagation="true">
                        Delete
                    </button>
                </td>
            </tr>
        }
            <tr id="addRow">
                <td></td>
                <td>
                    <input class="form-control w-50" @bind="newCategoryTitle" placeholder="New Category" />
                </td>
                <td class="text-center">
                    <button class="btn btn-secondary" @onclick="AddCategory">
                        Add
                    </button>
                </td>
            </tr>
        </tbody>
    </table>

    if (selectedProductId != 0)
    {
        <CategoryProducts CategoryId="selectedProductId"></CategoryProducts>
    }
}


@code {
    private const string categoriesEndPoint = "api/Category/categories";
    private List<Category> categories;
    private string? newCategoryTitle;

    private const string searchEndPoint = "/api/Category/categories/search?categoryName=";
    private List<long> searchResult = new List<long>();
    private bool startSearch = false;
    private string? inputSearch = string.Empty;

    private long selectedProductId = 0;

    private long renameCategory = 0;
    private string categoryTitle;

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
    }

    private async Task GetCategories()
    {
        categories = await Http.GetFromJsonAsync<List<Category>>(categoriesEndPoint);

        if (startSearch)
        {
            categories.RemoveAll(x => !searchResult.Contains(x.Id));
        }
    }

    private async Task AddCategory()
    {
        var addCategory = new Category { Title = newCategoryTitle };

        await Http.PostAsJsonAsync(categoriesEndPoint, addCategory);

        newCategoryTitle = string.Empty;

        await GetCategories();
    }

    private async Task DeleteCategory(long id)
    {
        if (selectedProductId == id) selectedProductId = 0;

        await Http.DeleteAsync($"{categoriesEndPoint}/{id}");
        await GetCategories();
    }

    private async Task CategoryClicked(long id)
    {
        if (selectedProductId == id)
            selectedProductId = 0;
        else
        {
            selectedProductId = 0;
            await Task.Delay(1);
            selectedProductId = id;
        }
    }

    private async Task StartSearch()
    {
        searchResult = await Http.GetFromJsonAsync<List<long>?>($"{searchEndPoint}{inputSearch}");

        Console.WriteLine(searchResult?.Count);
        startSearch = true;
        await GetCategories();
    }

    private async Task Reset()
    {
        inputSearch = string.Empty;
        startSearch = false;
        await GetCategories();
    }

    private void StartRenameCategory(long id)
    {
        renameCategory = id;
        categoryTitle = string.Empty;
    }

    private async Task RenameCategory()
    {
        if (string.IsNullOrWhiteSpace(categoryTitle))
            return;

        Category renamedCategory = new Category
        {
            Title = categoryTitle
        };

        await Http.PutAsJsonAsync($"api/Category/{renameCategory}", renamedCategory);
        StartRenameCategory(0);
        await GetCategories();
    }

}
